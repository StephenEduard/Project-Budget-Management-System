<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Budget Management System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #1a1a1a;
            color: #ffffff;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #3498db);
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }

        .nav-tabs {
            display: flex;
            background: #2c2c2c;
            border-bottom: 1px solid #444;
        }

        .tab-button {
            background: none;
            border: none;
            color: #ccc;
            padding: 15px 25px;
            cursor: pointer;
            transition: all 0.3s;
            border-bottom: 3px solid transparent;
        }

        .tab-button:hover {
            background: #3c3c3c;
            color: #fff;
        }

        .tab-button.active {
            background: #3498db;
            color: #fff;
            border-bottom-color: #2980b9;
        }

        .tab-content {
            display: none;
            padding: 20px;
        }

        .tab-content.active {
            display: block;
        }

        .project-selector {
            margin-bottom: 20px;
            padding: 15px;
            background: #2c2c2c;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .project-selector select {
            background: #3c3c3c;
            color: #fff;
            border: 1px solid #555;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 16px;
        }

        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .btn:hover {
            background: #2980b9;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #27ae60;
        }

        .btn-success:hover {
            background: #229954;
        }

        .btn-danger {
            background: #e74c3c;
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        .btn-warning {
            background: #f39c12;
        }

        .btn-warning:hover {
            background: #e67e22;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            transition: transform 0.3s;
        }

        .metric-card:hover {
            transform: translateY(-5px);
        }

        .metric-value {
            font-size: 2.5em;
            font-weight: bold;
            margin: 10px 0;
        }

        .metric-label {
            color: #bdc3c7;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .chart-container {
            background: #2c2c2c;
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }

        .table-container {
            background: #2c2c2c;
            border-radius: 12px;
            overflow: hidden;
            margin: 20px 0;
        }

        .table-header {
            background: #34495e;
            padding: 15px 20px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th,
        .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #444;
            font-size: 14px;
        }

        .data-table th {
            background: #3c3c3c;
            font-weight: bold;
            position: sticky;
            top: 0;
        }

        .data-table tr:hover {
            background: #3c3c3c;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: bold;
            text-align: center;
            display: inline-block;
            min-width: 80px;
        }

        .status-planned { background: #95a5a6; color: #000; }
        .status-provisioned { background: #3498db; }
        .status-committed { background: #f39c12; color: #000; }
        .status-partial-paid { background: #9b59b6; }
        .status-claimed { background: #e67e22; }
        .status-paid { background: #27ae60; }

        .form-container {
            background: #2c2c2c;
            padding: 30px;
            border-radius: 12px;
            max-width: 900px;
            margin: 0 auto;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #bdc3c7;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            background: #3c3c3c;
            border: 1px solid #555;
            border-radius: 6px;
            color: #fff;
            font-size: 16px;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .form-row-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
        }

        .budget-item-selector {
            background: #3c3c3c;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            border: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s;
        }

        .budget-item-selector:hover {
            border-color: #3498db;
        }

        .budget-item-selector.selected {
            border-color: #27ae60;
            background: rgba(39, 174, 96, 0.1);
        }

        .percentage-input {
            width: 80px;
            margin-left: 10px;
        }

        .file-upload {
            border: 2px dashed #555;
            padding: 40px;
            text-align: center;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .file-upload:hover {
            border-color: #3498db;
            background: rgba(52, 152, 219, 0.1);
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
        }

        .modal-content {
            background-color: #2c2c2c;
            margin: 5% auto;
            padding: 30px;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #fff;
        }

        .progress-bar {
            background: #444;
            border-radius: 10px;
            overflow: hidden;
            height: 20px;
            margin: 10px 0;
        }

        .progress-fill {
            background: linear-gradient(90deg, #27ae60, #2ecc71);
            height: 100%;
            transition: width 0.3s;
        }

        .service-provider-filter {
            background: #34495e;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .claim-summary {
            background: #34495e;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }

        .claim-item {
            background: #444;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        @media (max-width: 768px) {
            .form-row, .form-row-3 {
                grid-template-columns: 1fr;
            }
            
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .nav-tabs {
                flex-wrap: wrap;
            }

            .data-table {
                font-size: 12px;
            }

            .data-table th,
            .data-table td {
                padding: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🏗️ Project Budget Management System</h1>
        <p>Comprehensive project financial tracking and management</p>
    </div>

    <div class="nav-tabs">
        <button class="tab-button active" onclick="switchTab('dashboard')">📊 Dashboard</button>
        <button class="tab-button" onclick="switchTab('budget')">💰 Budget</button>
        <button class="tab-button" onclick="switchTab('claims')">📝 Claims</button>
        <button class="tab-button" onclick="switchTab('payments')">💳 Payments</button>
        <button class="tab-button" onclick="switchTab('positions')">📋 Positions Setup</button>
        <button class="tab-button" onclick="switchTab('settings')">⚙️ Settings</button>
    </div>

    <!-- Dashboard Tab -->
    <div id="dashboard" class="tab-content active">
        <div class="project-selector">
            <label>Select Project:</label>
            <select id="projectSelect" onchange="loadProjectData()">
                <option value="all">All Projects Combined</option>
                <option value="construction">KB Construction Project</option>
                <option value="datacenter">Data Center Equipment</option>
                <option value="marketing">Marketing Campaign 2025</option>
            </select>
            <button class="btn" onclick="openModal('newProjectModal')">+ New Project</button>
            <button class="btn btn-success" onclick="exportToCSV()">📊 Export CSV</button>
        </div>

        <div class="dashboard-grid">
            <div class="metric-card">
                <div class="metric-label">Total Budget</div>
                <div class="metric-value" id="totalBudget">R 11,085,023</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 88%"></div>
                </div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Total Claimed</div>
                <div class="metric-value" id="totalClaimed">R 1,306,837</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Total Paid</div>
                <div class="metric-value" id="totalPaid">R 308,000</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Outstanding</div>
                <div class="metric-value" id="totalOutstanding">R 9,778,186</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Committed</div>
                <div class="metric-value" id="totalCommitted">R 2,500,000</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Planned</div>
                <div class="metric-value" id="totalPlanned">R 7,278,186</div>
            </div>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            <div class="chart-container">
                <h3>Budget Status Distribution</h3>
                <canvas id="statusChart" width="300" height="300"></canvas>
            </div>
            <div class="chart-container">
                <h3>Payment Status</h3>
                <canvas id="paymentChart" width="300" height="300"></canvas>
            </div>
        </div>

        <div class="chart-container">
            <h3>Budget by Position Category</h3>
            <canvas id="positionChart" width="800" height="400"></canvas>
        </div>
    </div>

    <!-- Budget Tab -->
    <div id="budget" class="tab-content">
        <div class="table-container">
            <div class="table-header">
                <h3>Project Budget Items</h3>
                <button class="btn btn-success" onclick="openModal('newBudgetItemModal')">+ Add Budget Item</button>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Position Category</th>
                        <th>Service Provider</th>
                        <th>Location</th>
                        <th>Start Date</th>
                        <th>Due Date</th>
                        <th>Status</th>
                        <th>Units</th>
                        <th>Qty</th>
                        <th>Rate</th>
                        <th>Budget Amount</th>
                        <th>Claimed %</th>
                        <th>Claimed Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="budgetTableBody">
                    <!-- Dynamic content will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Claims Tab -->
    <div id="claims" class="tab-content">
        <div class="service-provider-filter">
            <label>Service Provider:</label>
            <select id="serviceProviderSelect" onchange="filterBudgetItems()">
                <option value="">Select Service Provider</option>
                <option value="Stephen Eduard">Stephen Eduard</option>
                <option value="KB Construction">KB Construction</option>
                <option value="ABC Structural">ABC Structural</option>
                <option value="DEF Interiors">DEF Interiors</option>
            </select>
        </div>

        <div class="form-container">
            <h2>Submit New Claim</h2>
            <form id="claimForm">
                <div class="form-row">
                    <div class="form-group">
                        <label>Claim Reference</label>
                        <input type="text" id="claimReference" required placeholder="Auto-generated if empty">
                    </div>
                    <div class="form-group">
                        <label>Claim Date</label>
                        <input type="date" id="claimDate" required>
                    </div>
                </div>
                <div class="form-group">
                    <label>Claim Description</label>
                    <textarea id="claimDescription" rows="3" required></textarea>
                </div>
                
                <h3>Select Budget Items to Claim</h3>
                <div id="budgetItemsForClaim">
                    <!-- Dynamic content based on selected service provider -->
                </div>

                <div class="claim-summary">
                    <h3>Claim Summary</h3>
                    <div id="claimSummaryContent">
                        <p>Total Claim Amount: <span id="totalClaimAmount">R 0.00</span></p>
                    </div>
                </div>

                <div class="form-group">
                    <label>Upload Supporting Documents</label>
                    <div class="file-upload" onclick="document.getElementById('claimFiles').click()">
                        <p>📄 Click to upload invoices/documents or drag and drop</p>
                        <input type="file" id="claimFiles" style="display: none" accept=".pdf,.jpg,.png,.doc,.docx" multiple>
                    </div>
                </div>
                
                <button type="submit" class="btn btn-success">Submit Claim</button>
            </form>
        </div>
    </div>

    <!-- Payments Tab -->
    <div id="payments" class="tab-content">
        <div class="table-container">
            <div class="table-header">
                <h3>Active Claims & Payments</h3>
                <div>
                    <select id="paymentStatusFilter" onchange="filterPayments()">
                        <option value="">All Statuses</option>
                        <option value="claimed">Claimed</option>
                        <option value="partial-paid">Partial Paid</option>
                        <option value="paid">Paid</option>
                    </select>
                </div>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Claim Reference</th>
                        <th>Service Provider</th>
                        <th>Claim Date</th>
                        <th>Due Date</th>
                        <th>Amount</th>
                        <th>Current Status</th>
                        <th>Update Status</th>
                        <th>Payment Amount</th>
                        <th>Payment Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="paymentsTableBody">
                    <!-- Dynamic content will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Positions Setup Tab -->
    <div id="positions" class="tab-content">
        <div class="table-container">
            <div class="table-header">
                <h3>Position Categories Setup</h3>
                <button class="btn btn-success" onclick="openModal('newPositionModal')">+ Add Position Category</button>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Position Name</th>
                        <th>Category Code</th>
                        <th>Description</th>
                        <th>Default Service Providers</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="positionsTableBody">
                    <!-- Dynamic content will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Settings Tab -->
    <div id="settings" class="tab-content">
        <div class="form-container">
            <h2>System Configuration</h2>
            <div class="form-row">
                <div class="form-group">
                    <label>Project Type Template</label>
                    <select id="projectTemplate" onchange="loadTemplate()">
                        <option value="construction">Construction</option>
                        <option value="datacenter">Data Center</option>
                        <option value="marketing">Marketing</option>
                        <option value="custom">Custom</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Currency Symbol</label>
                    <input type="text" id="currencySymbol" value="R" placeholder="e.g., $, €, £, R">
                </div>
            </div>
            <div class="form-group">
                <label>Location Field Label</label>
                <input type="text" id="locationLabel" value="Room Name" placeholder="e.g., Room Name, Site, Area, Zone">
            </div>
            
            <h3>Service Providers</h3>
            <div id="serviceProvidersList">
                <!-- Dynamic content -->
            </div>
            <button class="btn btn-success" onclick="openModal('newServiceProviderModal')">+ Add Service Provider</button>
            
            <br><br>
            <button class="btn btn-success" onclick="saveSettings()">Save All Settings</button>
        </div>
    </div>

    <!-- Modals -->
    <div id="newProjectModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('newProjectModal')">&times;</span>
            <h2>Create New Project</h2>
            <form id="newProjectForm">
                <div class="form-group">
                    <label>Project Name</label>
                    <input type="text" id="newProjectName" required>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Project Type</label>
                        <select id="newProjectType" required>
                            <option value="construction">Construction</option>
                            <option value="datacenter">Data Center</option>
                            <option value="marketing">Marketing</option>
                            <option value="custom">Custom</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Total Budget</label>
                        <input type="number" id="newProjectBudget" step="0.01" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Start Date</label>
                        <input type="date" id="newProjectStart" required>
                    </div>
                    <div class="form-group">
                        <label>End Date</label>
                        <input type="date" id="newProjectEnd" required>
                    </div>
                </div>
                <button type="submit" class="btn btn-success">Create Project</button>
            </form>
        </div>
    </div>

    <div id="newBudgetItemModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('newBudgetItemModal')">&times;</span>
            <h2>Add Budget Item</h2>
            <form id="newBudgetItemForm">
                <div class="form-group">
                    <label>Description</label>
                    <input type="text" id="newBudgetDescription" required>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Position Category</label>
                        <select id="newBudgetPosition" required>
                            <!-- Populated from positions setup -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Service Provider</label>
                        <select id="newBudgetServiceProvider" required>
                            <!-- Populated from service providers -->
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Location</label>
                        <input type="text" id="newBudgetLocation" required>
                    </div>
                    <div class="form-group">
                        <label>Units</label>
                        <input type="text" id="newBudgetUnits" placeholder="e.g., m2, m3, #, set" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Start Date</label>
                        <input type="date" id="newBudgetStart">
                    </div>
                    <div class="form-group">
                        <label>Due Date</label>
                        <input type="date" id="newBudgetDue">
                    </div>
                </div>
                <div class="form-row-3">
                    <div class="form-group">
                        <label>Quantity</label>
                        <input type="number" id="newBudgetQty" step="0.01" required onchange="calculateBudgetAmount()">
                    </div>
                    <div class="form-group">
                        <label>Rate per Unit</label>
                        <input type="number" id="newBudgetRate" step="0.01" required onchange="calculateBudgetAmount()">
                    </div>
                    <div class="form-group">
                        <label>Total Amount</label>
                        <input type="number" id="newBudgetAmount" step="0.01" readonly>
                    </div>
                </div>
                <button type="submit" class="btn btn-success">Add Budget Item</button>
            </form>
        </div>
    </div>

    <div id="newPositionModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('newPositionModal')">&times;</span>
            <h2>Add Position Category</h2>
            <form id="newPositionForm">
                <div class="form-row">
                    <div class="form-group">
                        <label>Position Name</label>
                        <input type="text" id="newPositionName" required>
                    </div>
                    <div class="form-group">
                        <label>Category Code</label>
                        <input type="text" id="newPositionCode" required placeholder="e.g., 10, 20, 30">
                    </div>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="newPositionDescription" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label>Default Service Providers (comma separated)</label>
                    <input type="text" id="newPositionProviders" placeholder="e.g., Stephen Eduard, KB Construction">
                </div>
                <button type="submit" class="btn btn-success">Add Position Category</button>
            </form>
        </div>
    </div>

    <div id="newServiceProviderModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('newServiceProviderModal')">&times;</span>
            <h2>Add Service Provider</h2>
            <form id="newServiceProviderForm">
                <div class="form-row">
                    <div class="form-group">
                        <label>Company Name</label>
                        <input type="text" id="newProviderName" required>
                    </div>
                    <div class="form-group">
                        <label>Contact Person</label>
                        <input type="text" id="newProviderContact">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" id="newProviderEmail">
                    </div>
                    <div class="form-group">
                        <label>Phone</label>
                        <input type="tel" id="newProviderPhone">
                    </div>
                </div>
                <div class="form-group">
                    <label>Specialization Areas</label>
                    <input type="text" id="newProviderSpecialization" placeholder="e.g., Earthworks, Concrete, Electrical">
                </div>
                <button type="submit" class="btn btn-success">Add Service Provider</button>
            </form>
        </div>
    </div>

    <script>
        // Global data storage
        let projectData = {
            construction: {
                name: 'KB Construction Project',
                budget: 11085023.39,
                budgetItems: [
                    {
                        id: 'B003',
                        description: '25Mpa Concrete in raft foundation',
                        positionCategory: 'Concrete',
                        serviceProvider: 'ABC Structural',
                        location: 'New Chalets',
                        startDate: '2025-03-01',
                        dueDate: '2025-03-15',
                        status: 'planned',
                        units: 'm3',
                        qty: 34,
                        rate: 3577.63,
                        budgetAmount: 121639.42,
                        claimedPercentage: 0,
                        claimedAmount: 0
                    },
                    {
                        id: 'B004',
                        description: 'Steel reinforcement for foundation',
                        positionCategory: 'Concrete',
                        serviceProvider: 'ABC Structural',
                        location: 'New Chalets',
                        startDate: '2025-02-15',
                        dueDate: '2025-03-01',
                        status: 'provisioned',
                        units: 'kg',
                        qty: 1200,
                        rate: 25.50,
                        budgetAmount: 30600,
                        claimedPercentage: 0,
                        claimedAmount: 0
                    }
                ],
                claims: [
                    {
                        id: 'CLM001',
                        reference: 'CLM-2025-001',
                        serviceProvider: 'Stephen Eduard',
                        claimDate: '2025-09-01',
                        dueDate: '2025-09-30',
                        totalAmount: 2871.28,
                        status: 'claimed',
                        budgetItems: ['B001'],
                        description: 'Soil poisoning work completed for Phase 1'
                    },
                    {
                        id: 'CLM002',
                        reference: 'CLM-2025-002',
                        serviceProvider: 'KB Construction',
                        claimDate: '2025-09-15',
                        dueDate: '2025-10-15',
                        totalAmount: 2258.48,
                        status: 'claimed',
                        budgetItems: ['B002'],
                        description: 'Excavation work completed'
                    }
                ]
            },
            datacenter: {
                name: 'Data Center Equipment',
                budget: 5000000,
                budgetItems: [],
                claims: []
            },
            marketing: {
                name: 'Marketing Campaign 2025',
                budget: 500000,
                budgetItems: [],
                claims: []
            }
        };

        let positionCategories = [
            {
                name: 'Earthworks',
                code: '30',
                description: 'Site preparation and earthmoving activities',
                defaultProviders: ['Stephen Eduard', 'KB Construction']
            },
            {
                name: 'Concrete',
                code: '40',
                description: 'Concrete work and reinforcement',
                defaultProviders: ['ABC Structural', 'KB Construction']
            },
            {
                name: 'Structural Steel',
                code: '50',
                description: 'Steel frame and structural elements',
                defaultProviders: ['ABC Structural']
            },
            {
                name: 'Interiors',
                code: '80',
                description: 'Interior finishing and fitouts',
                defaultProviders: ['DEF Interiors']
            }
        ];

        let serviceProviders = [
            {
                name: 'Stephen Eduard',
                contact: 'Stephen Eduard',
                email: 'stephen@example.com',
                phone: '+27 11 123 4567',
                specialization: 'Earthworks, Site Preparation'
            },
            {
                name: 'KB Construction',
                contact: 'John Smith',
                email: 'john@kbconstruction.com',
                phone: '+27 11 234 5678',
                specialization: 'General Construction, Earthworks'
            },
            {
                name: 'ABC Structural',
                contact: 'Mike Jones',
                email: 'mike@abcstructural.com',
                phone: '+27 11 345 6789',
                specialization: 'Concrete, Structural Steel'
            },
            {
                name: 'DEF Interiors',
                contact: 'Sarah Brown',
                email: 'sarah@definteriors.com',
                phone: '+27 11 456 7890',
                specialization: 'Interior Finishing, Fitouts'
            }
        ];

        let systemSettings = {
            locationLabel: 'Room Name',
            currencySymbol: 'R'
        };

        // Tab switching functionality
        function switchTab(tabName) {
            const tabs = document.querySelectorAll('.tab-content');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            const buttons = document.querySelectorAll('.tab-button');
            buttons.forEach(button => button.classList.remove('active'));
            
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
            
            if (tabName === 'dashboard') {
                loadDashboardData();
            } else if (tabName === 'budget') {
                loadBudgetData();
            } else if (tabName === 'claims') {
                loadClaimsData();
            } else if (tabName === 'payments') {
                loadPaymentsData();
            } else if (tabName === 'positions') {
                loadPositionsData();
            }
        }

        // Modal functionality
        function openModal(modalId) {
            if (modalId === 'newBudgetItemModal') {
                populateBudgetItemForm();
            }
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Dashboard functionality
        function loadDashboardData() {
            const selectedProject = document.getElementById('projectSelect').value;
            
            if (selectedProject === 'all') {
                loadCombinedDashboardData();
            } else {
                loadSingleProjectDashboardData(selectedProject);
            }
            
            createCharts();
        }

        function loadCombinedDashboardData() {
            let totalBudget = 0;
            let totalClaimed = 0;
            let totalPaid = 0;
            let totalCommitted = 0;
            let totalPlanned = 0;
            
            Object.values(projectData).forEach(project => {
                totalBudget += project.budget;
                project.budgetItems.forEach(item => {
                    totalClaimed += item.claimedAmount;
                    if (item.status === 'committed') totalCommitted += item.budgetAmount;
                    if (item.status === 'planned') totalPlanned += item.budgetAmount;
                });
                project.claims.forEach(claim => {
                    if (claim.status === 'paid') totalPaid += claim.totalAmount;
                });
            });
            
            updateMetrics(totalBudget, totalClaimed, totalPaid, totalCommitted, totalPlanned);
        }

        function loadSingleProjectDashboardData(projectKey) {
            const project = projectData[projectKey];
            if (!project) return;
            
            let totalClaimed = 0;
            let totalPaid = 0;
            let totalCommitted = 0;
            let totalPlanned = 0;
            
            project.budgetItems.forEach(item => {
                totalClaimed += item.claimedAmount;
                if (item.status === 'committed') totalCommitted += item.budgetAmount;
                if (item.status === 'planned') totalPlanned += item.budgetAmount;
            });
            
            project.claims.forEach(claim => {
                if (claim.status === 'paid') totalPaid += claim.totalAmount;
            });
            
            updateMetrics(project.budget, totalClaimed, totalPaid, totalCommitted, totalPlanned);
        }

        function updateMetrics(budget, claimed, paid, committed, planned) {
            document.getElementById('totalBudget').textContent = formatCurrency(budget);
            document.getElementById('totalClaimed').textContent = formatCurrency(claimed);
            document.getElementById('totalPaid').textContent = formatCurrency(paid);
            document.getElementById('totalOutstanding').textContent = formatCurrency(budget - paid);
            document.getElementById('totalCommitted').textContent = formatCurrency(committed);
            document.getElementById('totalPlanned').textContent = formatCurrency(planned);
        }

        function formatCurrency(amount) {
            return `${systemSettings.currencySymbol} ${amount.toLocaleString('en-ZA', {minimumFractionDigits: 2})}`;
        }

        // Budget functionality
        function loadBudgetData() {
            const selectedProject = document.getElementById('projectSelect').value;
            const tbody = document.getElementById('budgetTableBody');
            tbody.innerHTML = '';

            let budgetItems = [];
            if (selectedProject === 'all') {
                Object.values(projectData).forEach(project => {
                    budgetItems = budgetItems.concat(project.budgetItems);
                });
            } else if (projectData[selectedProject]) {
                budgetItems = projectData[selectedProject].budgetItems;
            }

            budgetItems.forEach((item, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.description}</td>
                    <td>${item.positionCategory}</td>
                    <td>${item.serviceProvider}</td>
                    <td>${item.location}</td>
                    <td>${item.startDate || '-'}</td>
                    <td>${item.dueDate || '-'}</td>
                    <td><span class="status-badge status-${item.status.replace(' ', '-')}">${item.status.charAt(0).toUpperCase() + item.status.slice(1)}</span></td>
                    <td>${item.units}</td>
                    <td>${item.qty}</td>
                    <td>${formatCurrency(item.rate)}</td>
                    <td>${formatCurrency(item.budgetAmount)}</td>
                    <td>${item.claimedPercentage}%</td>
                    <td>${formatCurrency(item.claimedAmount)}</td>
                    <td>
                        <button class="btn btn-warning" onclick="editBudgetItem('${item.id}')">Edit</button>
                        <button class="btn btn-danger" onclick="deleteBudgetItem('${item.id}')">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Claims functionality
        function loadClaimsData() {
            populateServiceProviderSelect();
        }

        function populateServiceProviderSelect() {
            const select = document.getElementById('serviceProviderSelect');
            select.innerHTML = '<option value="">Select Service Provider</option>';
            
            serviceProviders.forEach(provider => {
                const option = document.createElement('option');
                option.value = provider.name;
                option.textContent = provider.name;
                select.appendChild(option);
            });
        }

        function filterBudgetItems() {
            const selectedProvider = document.getElementById('serviceProviderSelect').value;
            const container = document.getElementById('budgetItemsForClaim');
            container.innerHTML = '';

            if (!selectedProvider) {
                container.innerHTML = '<p>Please select a service provider to see available budget items.</p>';
                return;
            }

            const selectedProject = document.getElementById('projectSelect').value;
            let budgetItems = [];
            
            if (selectedProject === 'all') {
                Object.values(projectData).forEach(project => {
                    budgetItems = budgetItems.concat(project.budgetItems);
                });
            } else if (projectData[selectedProject]) {
                budgetItems = projectData[selectedProject].budgetItems;
            }

            const filteredItems = budgetItems.filter(item => 
                item.serviceProvider === selectedProvider && 
                item.claimedPercentage < 100
            );

            if (filteredItems.length === 0) {
                container.innerHTML = '<p>No available budget items for this service provider.</p>';
                return;
            }

            filteredItems.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));

            filteredItems.forEach(item => {
                const remainingPercentage = 100 - item.claimedPercentage;
                const remainingAmount = item.budgetAmount * (remainingPercentage / 100);
                
                const itemDiv = document.createElement('div');
                itemDiv.className = 'budget-item-selector';
                itemDiv.dataset.itemId = item.id;
                itemDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>${item.description}</strong>
                            <div style="color: #bdc3c7; font-size: 0.9em;">
                                ${item.positionCategory} | ${item.location} | Due: ${item.dueDate}
                            </div>
                            <div style="color: #3498db; font-size: 0.9em;">
                                Budget: ${formatCurrency(item.budgetAmount)} | 
                                Claimed: ${item.claimedPercentage}% | 
                                Available: ${formatCurrency(remainingAmount)}
                            </div>
                        </div>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <input type="checkbox" class="budget-item-checkbox" data-item-id="${item.id}" onchange="toggleBudgetItem('${item.id}')">
                            <input type="number" class="percentage-input" id="percentage-${item.id}" 
                                   min="1" max="${remainingPercentage}" value="${remainingPercentage}" 
                                   onchange="updateClaimAmount()" disabled>
                            <span>%</span>
                        </div>
                    </div>
                `;
                container.appendChild(itemDiv);
            });
        }

        function toggleBudgetItem(itemId) {
            const checkbox = document.querySelector(`input[data-item-id="${itemId}"]`);
            const percentageInput = document.getElementById(`percentage-${itemId}`);
            const selector = document.querySelector(`[data-item-id="${itemId}"]`);
            
            if (checkbox.checked) {
                percentageInput.disabled = false;
                selector.classList.add('selected');
            } else {
                percentageInput.disabled = true;
                selector.classList.remove('selected');
            }
            
            updateClaimAmount();
        }

        function updateClaimAmount() {
            let totalAmount = 0;
            const selectedProject = document.getElementById('projectSelect').value;
            let budgetItems = [];
            
            if (selectedProject === 'all') {
                Object.values(projectData).forEach(project => {
                    budgetItems = budgetItems.concat(project.budgetItems);
                });
            } else if (projectData[selectedProject]) {
                budgetItems = projectData[selectedProject].budgetItems;
            }

            document.querySelectorAll('.budget-item-checkbox:checked').forEach(checkbox => {
                const itemId = checkbox.dataset.itemId;
                const percentage = parseFloat(document.getElementById(`percentage-${itemId}`).value) || 0;
                const item = budgetItems.find(b => b.id === itemId);
                
                if (item) {
                    totalAmount += (item.budgetAmount * percentage / 100);
                }
            });

            document.getElementById('totalClaimAmount').textContent = formatCurrency(totalAmount);
        }

        // Payments functionality
        function loadPaymentsData() {
            const tbody = document.getElementById('paymentsTableBody');
            tbody.innerHTML = '';

            const selectedProject = document.getElementById('projectSelect').value;
            let claims = [];
            
            if (selectedProject === 'all') {
                Object.values(projectData).forEach(project => {
                    claims = claims.concat(project.claims);
                });
            } else if (projectData[selectedProject]) {
                claims = projectData[selectedProject].claims;
            }

            claims.forEach(claim => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${claim.reference}</td>
                    <td>${claim.serviceProvider}</td>
                    <td>${claim.claimDate}</td>
                    <td>${claim.dueDate}</td>
                    <td>${formatCurrency(claim.totalAmount)}</td>
                    <td><span class="status-badge status-${claim.status.replace(' ', '-')}">${claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}</span></td>
                    <td>
                        <select onchange="updateClaimStatus('${claim.id}', this.value)">
                            <option value="claimed" ${claim.status === 'claimed' ? 'selected' : ''}>Claimed</option>
                            <option value="partial-paid" ${claim.status === 'partial-paid' ? 'selected' : ''}>Partial Paid</option>
                            <option value="paid" ${claim.status === 'paid' ? 'selected' : ''}>Paid</option>
                        </select>
                    </td>
                    <td>
                        <input type="number" step="0.01" placeholder="Payment amount" 
                               onchange="updatePaymentAmount('${claim.id}', this.value)">
                    </td>
                    <td>
                        <input type="date" onchange="updatePaymentDate('${claim.id}', this.value)">
                    </td>
                    <td>
                        <button class="btn btn-warning" onclick="viewClaimDetails('${claim.id}')">View</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateClaimStatus(claimId, newStatus) {
            // Find and update claim status
            Object.values(projectData).forEach(project => {
                const claim = project.claims.find(c => c.id === claimId);
                if (claim) {
                    claim.status = newStatus;
                    
                    // Update related budget items status
                    claim.budgetItems.forEach(budgetItemId => {
                        const budgetItem = project.budgetItems.find(b => b.id === budgetItemId);
                        if (budgetItem) {
                            budgetItem.status = newStatus;
                        }
                    });
                }
            });
            
            // Refresh displays
            loadBudgetData();
            loadDashboardData();
        }

        // Positions functionality
        function loadPositionsData() {
            const tbody = document.getElementById('positionsTableBody');
            tbody.innerHTML = '';

            positionCategories.forEach((position, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${position.name}</td>
                    <td>${position.code}</td>
                    <td>${position.description}</td>
                    <td>${position.defaultProviders.join(', ')}</td>
                    <td>
                        <button class="btn btn-warning" onclick="editPosition(${index})">Edit</button>
                        <button class="btn btn-danger" onclick="deletePosition(${index})">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Form population functions
        function populateBudgetItemForm() {
            const positionSelect = document.getElementById('newBudgetPosition');
            const providerSelect = document.getElementById('newBudgetServiceProvider');
            
            positionSelect.innerHTML = '';
            positionCategories.forEach(position => {
                const option = document.createElement('option');
                option.value = position.name;
                option.textContent = `${position.code} - ${position.name}`;
                positionSelect.appendChild(option);
            });
            
            providerSelect.innerHTML = '';
            serviceProviders.forEach(provider => {
                const option = document.createElement('option');
                option.value = provider.name;
                option.textContent = provider.name;
                providerSelect.appendChild(option);
            });
        }

        function calculateBudgetAmount() {
            const qty = parseFloat(document.getElementById('newBudgetQty').value) || 0;
            const rate = parseFloat(document.getElementById('newBudgetRate').value) || 0;
            document.getElementById('newBudgetAmount').value = (qty * rate).toFixed(2);
        }

        // Chart creation
        function createCharts() {
            createStatusChart();
            createPaymentChart();
            createPositionChart();
        }

        function createStatusChart() {
            const ctx = document.getElementById('statusChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (window.statusChart) {
                window.statusChart.destroy();
            }
            
            window.statusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Planned', 'Provisioned', 'Committed', 'Claimed', 'Paid'],
                    datasets: [{
                        data: [7278186, 500000, 2500000, 998837, 308000],
                        backgroundColor: ['#95a5a6', '#3498db', '#f39c12', '#e67e22', '#27ae60']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: { color: '#fff' }
                        }
                    }
                }
            });
        }

        function createPaymentChart() {
            const ctx = document.getElementById('paymentChart').getContext('2d');
            
            if (window.paymentChart) {
                window.paymentChart.destroy();
            }
            
            window.paymentChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Outstanding', 'Claimed', 'Paid'],
                    datasets: [{
                        data: [9778186, 998837, 308000],
                        backgroundColor: ['#e74c3c', '#f39c12', '#27ae60']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: { color: '#fff' }
                        }
                    }
                }
            });
        }

        function createPositionChart() {
            const ctx = document.getElementById('positionChart').getContext('2d');
            
            if (window.positionChart) {
                window.positionChart.destroy();
            }
            
            window.positionChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Earthworks', 'Concrete', 'Structural Steel', 'Interiors'],
                    datasets: [{
                        label: 'Budget Amount',
                        data: [8001.04, 152239.42, 850000, 400000],
                        backgroundColor: '#3498db'
                    }, {
                        label: 'Claimed Amount',
                        data: [5129.76, 0, 0, 0],
                        backgroundColor: '#f39c12'
                    }, {
                        label: 'Paid Amount',
                        data: [2871.28, 0, 0, 0],
                        backgroundColor: '#27ae60'
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { color: '#fff' }
                        },
                        x: {
                            ticks: { color: '#fff' }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: { color: '#fff' }
                        }
                    }
                }
            });
        }

        // Form submissions
        document.getElementById('newProjectForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const name = document.getElementById('newProjectName').value;
            const type = document.getElementById('newProjectType').value;
            const startDate = document.getElementById('newProjectStart').value;
            const endDate = document.getElementById('newProjectEnd').value;
            const budget = parseFloat(document.getElementById('newProjectBudget').value);

            const projectKey = name.toLowerCase().replace(/\s+/g, '');
            projectData[projectKey] = {
                name: name,
                budget: budget,
                startDate: startDate,
                endDate: endDate,
                budgetItems: [],
                claims: []
            };

            const select = document.getElementById('projectSelect');
            const option = document.createElement('option');
            option.value = projectKey;
            option.textContent = name;
            select.appendChild(option);

            closeModal('newProjectModal');
            this.reset();
            alert('Project created successfully!');
        });

        document.getElementById('newBudgetItemForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const selectedProject = document.getElementById('projectSelect').value;
            
            if (selectedProject === 'all') {
                alert('Please select a specific project to add budget items');
                return;
            }

            const budgetItem = {
                id: 'B' + Date.now(),
                positionNumber: document.getElementById('newBudgetPositionNumber').value,
                description: document.getElementById('newBudgetDescription').value,
                positionCategory: document.getElementById('newBudgetPosition').value,
                serviceProvider: document.getElementById('newBudgetServiceProvider').value,
                location: document.getElementById('newBudgetLocation').value,
                startDate: document.getElementById('newBudgetStart').value,
                dueDate: document.getElementById('newBudgetDue').value,
                status: 'planned',
                units: document.getElementById('newBudgetUnits').value,
                qty: parseFloat(document.getElementById('newBudgetQty').value),
                rate: parseFloat(document.getElementById('newBudgetRate').value),
                budgetAmount: parseFloat(document.getElementById('newBudgetAmount').value),
                claimedPercentage: 0,
                claimedAmount: 0
            };

            projectData[selectedProject].budgetItems.push(budgetItem);
            closeModal('newBudgetItemModal');
            this.reset();
            loadBudgetData();
            loadDashboardData();
            alert('Budget item added successfully!');
        });

        document.getElementById('claimForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const selectedProvider = document.getElementById('serviceProviderSelect').value;
            const selectedProject = document.getElementById('projectSelect').value;
            
            if (!selectedProvider) {
                alert('Please select a service provider');
                return;
            }

            if (selectedProject === 'all') {
                alert('Please select a specific project');
                return;
            }

            const selectedItems = [];
            let totalAmount = 0;
            
            document.querySelectorAll('.budget-item-checkbox:checked').forEach(checkbox => {
                const itemId = checkbox.dataset.itemId;
                const percentage = parseFloat(document.getElementById(`percentage-${itemId}`).value);
                const item = projectData[selectedProject].budgetItems.find(b => b.id === itemId);
                
                if (item) {
                    const claimAmount = item.budgetAmount * percentage / 100;
                    selectedItems.push({
                        budgetItemId: itemId,
                        percentage: percentage,
                        amount: claimAmount
                    });
                    totalAmount += claimAmount;
                    
                    // Update budget item
                    item.claimedPercentage += percentage;
                    item.claimedAmount += claimAmount;
                    if (item.claimedPercentage > 0) {
                        item.status = 'claimed';
                    }
                }
            });

            if (selectedItems.length === 0) {
                alert('Please select at least one budget item');
                return;
            }

            const claim = {
                id: 'CLM' + Date.now(),
                reference: document.getElementById('claimReference').value || 'CLM-' + new Date().toISOString().slice(0, 10),
                serviceProvider: selectedProvider,
                claimDate: document.getElementById('claimDate').value,
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10), // 30 days from now
                totalAmount: totalAmount,
                status: 'claimed',
                budgetItems: selectedItems.map(item => item.budgetItemId),
                description: document.getElementById('claimDescription').value,
                items: selectedItems
            };

            projectData[selectedProject].claims.push(claim);
            
            this.reset();
            document.getElementById('budgetItemsForClaim').innerHTML = '';
            document.getElementById('totalClaimAmount').textContent = formatCurrency(0);
            
            loadBudgetData();
            loadDashboardData();
            alert('Claim submitted successfully!');
        });

        document.getElementById('newPositionForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const position = {
                name: document.getElementById('newPositionName').value,
                code: document.getElementById('newPositionCode').value,
                description: document.getElementById('newPositionDescription').value,
                defaultProviders: document.getElementById('newPositionProviders').value.split(',').map(s => s.trim())
            };

            positionCategories.push(position);
            closeModal('newPositionModal');
            this.reset();
            loadPositionsData();
            alert('Position category added successfully!');
        });

        document.getElementById('newServiceProviderForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const provider = {
                name: document.getElementById('newProviderName').value,
                contact: document.getElementById('newProviderContact').value,
                email: document.getElementById('newProviderEmail').value,
                phone: document.getElementById('newProviderPhone').value,
                specialization: document.getElementById('newProviderSpecialization').value
            };

            serviceProviders.push(provider);
            closeModal('newServiceProviderModal');
            this.reset();
            populateServiceProviderSelect();
            alert('Service provider added successfully!');
        });

        // Utility functions
        function loadProjectData() {
            loadDashboardData();
            if (document.getElementById('budget').classList.contains('active')) {
                loadBudgetData();
            }
            if (document.getElementById('payments').classList.contains('active')) {
                loadPaymentsData();
            }
        }

        function saveSettings() {
            systemSettings.locationLabel = document.getElementById('locationLabel').value;
            systemSettings.currencySymbol = document.getElementById('currencySymbol').value;
            alert('Settings saved successfully!');
            loadDashboardData();
        }

        function exportToCSV() {
            const selectedProject = document.getElementById('projectSelect').value;
            let data = [];
            
            if (selectedProject === 'all') {
                Object.values(projectData).forEach(project => {
                    project.budgetItems.forEach(item => {
                        data.push([
                            item.description, item.positionCategory, item.serviceProvider, 
                            item.location, item.startDate, item.dueDate, item.status, 
                            item.units, item.qty, item.rate, item.budgetAmount, 
                            item.claimedPercentage, item.claimedAmount
                        ]);
                    });
                });
            } else if (projectData[selectedProject]) {
                projectData[selectedProject].budgetItems.forEach(item => {
                    data.push([
                        item.description, item.positionCategory, item.serviceProvider, 
                        item.location, item.startDate, item.dueDate, item.status, 
                        item.units, item.qty, item.rate, item.budgetAmount, 
                        item.claimedPercentage, item.claimedAmount
                    ]);
                });
            }
            
            const csvContent = "data:text/csv;charset=utf-8," 
                + "Description,Position Category,Service Provider,Location,Start Date,Due Date,Status,Units,Quantity,Rate,Budget Amount,Claimed %,Claimed Amount\n"
                + data.map(row => row.join(",")).join("\n");
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "budget_data.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function loadTemplate() {
            const template = document.getElementById('projectTemplate').value;
            const locationLabel = document.getElementById('locationLabel');

            switch(template) {
                case 'construction':
                    locationLabel.value = 'Room/Area';
                    break;
                case 'datacenter':
                    locationLabel.value = 'Rack/Zone';
                    break;
                case 'marketing':
                    locationLabel.value = 'Campaign/Channel';
                    break;
            }
        }

        function editBudgetItem(itemId) {
            alert('Edit functionality would open a modal with pre-filled data for item: ' + itemId);
        }

        function deleteBudgetItem(itemId) {
            if (confirm('Are you sure you want to delete this budget item?')) {
                Object.values(projectData).forEach(project => {
                    const index = project.budgetItems.findIndex(item => item.id === itemId);
                    if (index !== -1) {
                        project.budgetItems.splice(index, 1);
                        loadBudgetData();
                        loadDashboardData();
                    }
                });
            }
        }

        function editPosition(index) {
            alert('Edit functionality would open a modal with pre-filled data');
        }

        function deletePosition(index) {
            if (confirm('Are you sure you want to delete this position category?')) {
                positionCategories.splice(index, 1);
                loadPositionsData();
            }
        }

        function updatePaymentAmount(claimId, amount) {
            // This would typically update the payment amount in the database
            console.log(`Payment amount for claim ${claimId}: ${amount}`);
        }

        function updatePaymentDate(claimId, date) {
            // This would typically update the payment date in the database
            console.log(`Payment date for claim ${claimId}: ${date}`);
        }

        function viewClaimDetails(claimId) {
            // Find the claim
            let claim = null;
            Object.values(projectData).forEach(project => {
                const foundClaim = project.claims.find(c => c.id === claimId);
                if (foundClaim) claim = foundClaim;
            });

            if (claim) {
                alert(`Claim Details:\n\nReference: ${claim.reference}\nService Provider: ${claim.serviceProvider}\nAmount: ${formatCurrency(claim.totalAmount)}\nDescription: ${claim.description}\nStatus: ${claim.status}`);
            }
        }

        function filterPayments() {
            const filterStatus = document.getElementById('paymentStatusFilter').value;
            const rows = document.querySelectorAll('#paymentsTableBody tr');
            
            rows.forEach(row => {
                if (!filterStatus) {
                    row.style.display = '';
                } else {
                    const statusCell = row.cells[5].textContent.toLowerCase();
                    if (statusCell.includes(filterStatus.replace('-', ' '))) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            });
        }

        // File upload handling
        document.getElementById('claimFiles').addEventListener('change', function(e) {
            const files = e.target.files;
            if (files.length > 0) {
                const fileUpload = document.querySelector('.file-upload');
                fileUpload.innerHTML = `<p>✅ ${files.length} file(s) uploaded successfully</p>`;
            }
        });

        // Initialize the application
        window.addEventListener('load', function() {
            loadDashboardData();
            loadTemplate();
            
            // Set default claim date to today
            document.getElementById('claimDate').value = new Date().toISOString().split('T')[0];
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });

        // Load service providers list in settings
        function loadServiceProvidersList() {
            const container = document.getElementById('serviceProvidersList');
            container.innerHTML = '';
            
            serviceProviders.forEach((provider, index) => {
                const providerDiv = document.createElement('div');
                providerDiv.style.cssText = 'background: #3c3c3c; padding: 15px; border-radius: 8px; margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center;';
                providerDiv.innerHTML = `
                    <div>
                        <strong>${provider.name}</strong>
                        <div style="color: #bdc3c7; font-size: 0.9em;">${provider.contact} | ${provider.email}</div>
                        <div style="color: #3498db; font-size: 0.8em;">${provider.specialization}</div>
                    </div>
                    <div>
                        <button class="btn btn-warning" onclick="editServiceProvider(${index})" style="margin: 2px;">Edit</button>
                        <button class="btn btn-danger" onclick="deleteServiceProvider(${index})" style="margin: 2px;">Delete</button>
                    </div>
                `;
                container.appendChild(providerDiv);
            });
        }

        function editServiceProvider(index) {
            alert('Edit functionality would open a modal with pre-filled data');
        }

        function deleteServiceProvider(index) {
            if (confirm('Are you sure you want to delete this service provider?')) {
                serviceProviders.splice(index, 1);
                loadServiceProvidersList();
                populateServiceProviderSelect();
            }
        }

        // Enhanced tab switching to load service providers in settings
        function switchTab(tabName) {
            const tabs = document.querySelectorAll('.tab-content');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            const buttons = document.querySelectorAll('.tab-button');
            buttons.forEach(button => button.classList.remove('active'));
            
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
            
            if (tabName === 'dashboard') {
                loadDashboardData();
            } else if (tabName === 'budget') {
                loadBudgetData();
            } else if (tabName === 'claims') {
                loadClaimsData();
            } else if (tabName === 'payments') {
                loadPaymentsData();
            } else if (tabName === 'positions') {
                loadPositionsData();
            } else if (tabName === 'settings') {
                loadServiceProvidersList();
            }
        }

        // Advanced search functionality for budget items
        function addBudgetSearch() {
            const searchContainer = document.createElement('div');
            searchContainer.style.cssText = 'margin: 20px 0; padding: 15px; background: #34495e; border-radius: 8px;';
            searchContainer.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 15px;">
                    <input type="text" id="searchDescription" placeholder="Search description..." style="padding: 8px; background: #3c3c3c; border: 1px solid #555; border-radius: 4px; color: #fff;">
                    <select id="searchProvider" style="padding: 8px; background: #3c3c3c; border: 1px solid #555; border-radius: 4px; color: #fff;">
                        <option value="">All Providers</option>
                    </select>
                    <select id="searchStatus" style="padding: 8px; background: #3c3c3c; border: 1px solid #555; border-radius: 4px; color: #fff;">
                        <option value="">All Statuses</option>
                        <option value="planned">Planned</option>
                        <option value="provisioned">Provisioned</option>
                        <option value="committed">Committed</option>
                        <option value="claimed">Claimed</option>
                        <option value="paid">Paid</option>
                    </select>
                    <button class="btn" onclick="searchBudgetItems()">Search</button>
                </div>
            `;
            
            // Insert before the table
            const budgetTab = document.getElementById('budget');
            const table = budgetTab.querySelector('.table-container');
            budgetTab.insertBefore(searchContainer, table);
            
            // Populate provider dropdown
            const providerSelect = document.getElementById('searchProvider');
            serviceProviders.forEach(provider => {
                const option = document.createElement('option');
                option.value = provider.name;
                option.textContent = provider.name;
                providerSelect.appendChild(option);
            });
        }

        function searchBudgetItems() {
            const description = document.getElementById('searchDescription').value.toLowerCase();
            const provider = document.getElementById('searchProvider').value;
            const status = document.getElementById('searchStatus').value;
            
            const rows = document.querySelectorAll('#budgetTableBody tr');
            rows.forEach(row => {
                const itemDescription = row.cells[0].textContent.toLowerCase();
                const itemProvider = row.cells[2].textContent;
                const itemStatus = row.cells[6].textContent.toLowerCase();
                
                const matchesDescription = !description || itemDescription.includes(description);
                const matchesProvider = !provider || itemProvider === provider;
                const matchesStatus = !status || itemStatus.includes(status);
                
                if (matchesDescription && matchesProvider && matchesStatus) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Add the search functionality when budget tab is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Add search to budget tab after a small delay to ensure DOM is ready
            setTimeout(() => {
                if (document.getElementById('budget')) {
                    addBudgetSearch();
                }
            }, 100);
        });
    </script>
</body>
</html>id: 'B001',
                        description: 'Soil poisoning to foundations and under floors',
                        positionCategory: 'Earthworks',
                        serviceProvider: 'Stephen Eduard',
                        location: 'New Chalets',
                        startDate: '2025-01-15',
                        dueDate: '2025-02-15',
                        status: 'committed',
                        units: 'm2',
                        qty: 304,
                        rate: 18.89,
                        budgetAmount: 5742.56,
                        claimedPercentage: 50,
                        claimedAmount: 2871.28
                    },
                    {
                        id: 'B002',
                        description: 'Excavations in earth for raft foundation',
                        positionCategory: 'Earthworks',
                        serviceProvider: 'KB Construction',
                        location: 'New Chalets',
                        startDate: '2025-02-01',
                        dueDate: '2025-02-28',
                        status: 'claimed',
                        units: 'm3',
                        qty: 28,
                        rate: 80.66,
                        budgetAmount: 2258.48,
                        claimedPercentage: 100,
                        claimedAmount: 2258.48
                    },
                    {